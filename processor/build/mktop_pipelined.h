/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Wed May  3 23:41:59 EDT 2023
 * 
 */

/* Generation options: */
#ifndef __mktop_pipelined_h__
#define __mktop_pipelined_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkCache.h"
#include "mkMainMem.h"
#include "mkpipelined.h"


/* Class declaration for the mktop_pipelined module */
class MOD_mktop_pipelined : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_BRAM<tUInt8,tUWide,tUInt64> INST_bram_memory;
  MOD_Reg<tUInt8> INST_bram_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_cnt_3;
  MOD_Reg<tUInt8> INST_bram_serverAdapter_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_bram_serverAdapter_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_outData_dequeueing;
  MOD_Wire<tUWide> INST_bram_serverAdapter_outData_enqw;
  MOD_Fifo<tUWide> INST_bram_serverAdapter_outData_ff;
  MOD_Reg<tUInt8> INST_bram_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_writeWithResp;
  MOD_Fifo<tUInt8> INST_cacheQueue;
  MOD_Reg<tUInt32> INST_cycle_count;
  MOD_mkCache INST_dCache;
  MOD_Reg<tUWide> INST_dreq;
  MOD_mkCache INST_iCache;
  MOD_Reg<tUWide> INST_ireq;
  MOD_mkMainMem INST_mainMem;
  MOD_Fifo<tUWide> INST_mmioreq;
  MOD_mkpipelined INST_rv_core;
 
 /* Constructor */
 public:
  MOD_mktop_pipelined(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_bram_serverAdapter_s1___d34;
  tUInt8 DEF_bram_serverAdapter_cnt_3_whas____d12;
  tUInt8 DEF_bram_serverAdapter_cnt_2_whas____d10;
  tUInt8 DEF_bram_serverAdapter_cnt_1_whas____d9;
  tUInt8 DEF_cacheQueue_first____d83;
  tUInt8 DEF_bram_serverAdapter_s1_4_BIT_0___d35;
  tUInt8 DEF_NOT_cacheQueue_first__3___d89;
 
 /* Local definitions */
 private:
  tUWide DEF_dCache_getToMem___d93;
  tUWide DEF_iCache_getToMem___d81;
  tUWide DEF_v__h8297;
  tUWide DEF_rv_core_getMMIOReq___d101;
  tUWide DEF_rv_core_getDReq___d67;
  tUWide DEF_rv_core_getIReq___d55;
  tUWide DEF_dCache_getToProc___d73;
  tUWide DEF_iCache_getToProc___d61;
  tUWide DEF_bram_serverAdapter_outData_enqw_wget____d7;
  tUWide DEF_bram_memory_read____d41;
  tUWide DEF_mmioreq_first____d118;
  tUWide DEF_dreq___d71;
  tUWide DEF_ireq___d59;
  tUWide DEF_ireq_9_BITS_67_TO_32_0_CONCAT_iCache_getToProc_ETC___d63;
  tUWide DEF_dreq_1_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d75;
 
 /* Rules */
 public:
  void RL_bram_serverAdapter_outData_enqueue();
  void RL_bram_serverAdapter_outData_dequeue();
  void RL_bram_serverAdapter_cnt_finalAdd();
  void RL_bram_serverAdapter_s1__dreg_update();
  void RL_bram_serverAdapter_stageReadResponseAlways();
  void RL_bram_serverAdapter_moveToOutFIFO();
  void RL_bram_serverAdapter_overRun();
  void RL_tic();
  void RL_requestI();
  void RL_responseI();
  void RL_requestD();
  void RL_responseD();
  void RL_iToMemReq();
  void RL_iFromMemResp();
  void RL_dToMemReq();
  void RL_dFromMemResp();
  void RL_requestMMIO();
  void RL_responseMMIO();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mktop_pipelined &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mktop_pipelined &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mktop_pipelined &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mktop_pipelined &backing);
};

#endif /* ifndef __mktop_pipelined_h__ */
