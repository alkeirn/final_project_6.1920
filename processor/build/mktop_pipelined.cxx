/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri May  5 16:36:42 EDT 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mktop_pipelined.h"


/* Literal declarations */
static unsigned int const UWide_literal_68_haaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									2863311530u,
									10u };
static tUWide const UWide_literal_68_haaaaaaaaaaaaaaaaa(68u,
							UWide_literal_68_haaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u };
static tUWide const UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(512u,
																					UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_545_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								2863311530u,
																								0u };
static tUWide const UWide_literal_545_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(545u,
																						UWide_literal_545_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_65_haaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
								       2863311530u,
								       0u };
static tUWide const UWide_literal_65_haaaaaaaaaaaaaaaa(65u, UWide_literal_65_haaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_11("\n", 1u);
static std::string const __str_literal_24("  \033[0;31mFAIL\033[0m (%0d)", 23u);
static std::string const __str_literal_23("  \033[0;32mPASS\033[0m", 17u);
static std::string const __str_literal_10(" }", 2u);
static std::string const __str_literal_21("%0d", 3u);
static std::string const __str_literal_22("%c", 2u);
static std::string const __str_literal_6("'h%h", 4u);
static std::string const __str_literal_7(", ", 2u);
static std::string const __str_literal_13("CacheResp { ", 12u);
static std::string const __str_literal_2("ERROR: %m: mkBRAMAdapter overrun", 32u);
static std::string const __str_literal_18("False", 5u);
static std::string const __str_literal_19("Get DReq", 8u);
static std::string const __str_literal_3("Get IReq", 8u);
static std::string const __str_literal_12("Get IResp ", 10u);
static std::string const __str_literal_20("Get MMIOReq", 11u);
static std::string const __str_literal_4("Mem { ", 6u);
static std::string const __str_literal_25("Put MMIOResp", 12u);
static std::string const __str_literal_17("True", 4u);
static std::string const __str_literal_8("addr: ", 6u);
static std::string const __str_literal_5("byte_en: ", 9u);
static std::string const __str_literal_9("data: ", 6u);
static std::string const __str_literal_14("first: ", 7u);
static std::string const __str_literal_1("memlines.vmh", 12u);
static std::string const __str_literal_15("second: ", 8u);
static std::string const __str_literal_16("second_valid: ", 14u);


/* Constructor */
MOD_mktop_pipelined::MOD_mktop_pipelined(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bram_memory(simHdl,
		     "bram_memory",
		     this,
		     __str_literal_1,
		     (tUInt8)0u,
		     12u,
		     512u,
		     8u,
		     64u,
		     4096u,
		     (tUInt8)0u,
		     1u),
    INST_bram_serverAdapter_cnt(simHdl, "bram_serverAdapter_cnt", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_bram_serverAdapter_cnt_1(simHdl, "bram_serverAdapter_cnt_1", this, 3u, (tUInt8)0u),
    INST_bram_serverAdapter_cnt_2(simHdl, "bram_serverAdapter_cnt_2", this, 3u, (tUInt8)0u),
    INST_bram_serverAdapter_cnt_3(simHdl, "bram_serverAdapter_cnt_3", this, 3u, (tUInt8)0u),
    INST_bram_serverAdapter_outData_beforeDeq(simHdl,
					      "bram_serverAdapter_outData_beforeDeq",
					      this,
					      1u,
					      (tUInt8)1u),
    INST_bram_serverAdapter_outData_beforeEnq(simHdl,
					      "bram_serverAdapter_outData_beforeEnq",
					      this,
					      1u,
					      (tUInt8)1u),
    INST_bram_serverAdapter_outData_dequeueing(simHdl,
					       "bram_serverAdapter_outData_dequeueing",
					       this,
					       0u),
    INST_bram_serverAdapter_outData_enqw(simHdl,
					 "bram_serverAdapter_outData_enqw",
					 this,
					 512u,
					 (tUInt8)0u),
    INST_bram_serverAdapter_outData_ff(simHdl,
				       "bram_serverAdapter_outData_ff",
				       this,
				       512u,
				       3u,
				       (tUInt8)0u,
				       0u),
    INST_bram_serverAdapter_s1(simHdl, "bram_serverAdapter_s1", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_bram_serverAdapter_s1_1(simHdl, "bram_serverAdapter_s1_1", this, 2u, (tUInt8)0u),
    INST_bram_serverAdapter_writeWithResp(simHdl,
					  "bram_serverAdapter_writeWithResp",
					  this,
					  2u,
					  (tUInt8)0u),
    INST_cacheQueue(simHdl, "cacheQueue", this, 1u, 2u, (tUInt8)1u, 0u),
    INST_cycle_count(simHdl, "cycle_count", this, 32u, 0u, (tUInt8)0u),
    INST_dCache(simHdl, "dCache", this),
    INST_dreq(simHdl, "dreq", this, 68u),
    INST_iCache(simHdl, "iCache", this),
    INST_ireq(simHdl, "ireq", this, 68u),
    INST_mainMem(simHdl, "mainMem", this),
    INST_mmioreq(simHdl, "mmioreq", this, 68u, 2u, (tUInt8)1u, 0u),
    INST_rv_core(simHdl, "rv_core", this),
    PORT_RST_N((tUInt8)1u),
    DEF_dCache_getToMem___d111(545u),
    DEF_iCache_getToMem___d99(545u),
    DEF_v__h8499(512u),
    DEF_rv_core_getMMIOReq___d119(68u),
    DEF_rv_core_getDReq___d76(68u),
    DEF_rv_core_getIReq___d55(68u),
    DEF_dCache_getToProc___d87(65u),
    DEF_iCache_getToProc___d66(65u),
    DEF_bram_serverAdapter_outData_enqw_wget____d7(512u),
    DEF_bram_memory_read____d41(512u),
    DEF_mmioreq_first____d136(68u),
    DEF_dreq___d83(68u),
    DEF_ireq___d62(68u),
    DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72(68u),
    DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93(68u)
{
  symbol_count = 40u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mktop_pipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "bram_memory", SYM_MODULE, &INST_bram_memory);
  init_symbol(&symbols[1u], "bram_serverAdapter_cnt", SYM_MODULE, &INST_bram_serverAdapter_cnt);
  init_symbol(&symbols[2u], "bram_serverAdapter_cnt_1", SYM_MODULE, &INST_bram_serverAdapter_cnt_1);
  init_symbol(&symbols[3u], "bram_serverAdapter_cnt_2", SYM_MODULE, &INST_bram_serverAdapter_cnt_2);
  init_symbol(&symbols[4u], "bram_serverAdapter_cnt_3", SYM_MODULE, &INST_bram_serverAdapter_cnt_3);
  init_symbol(&symbols[5u],
	      "bram_serverAdapter_outData_beforeDeq",
	      SYM_MODULE,
	      &INST_bram_serverAdapter_outData_beforeDeq);
  init_symbol(&symbols[6u],
	      "bram_serverAdapter_outData_beforeEnq",
	      SYM_MODULE,
	      &INST_bram_serverAdapter_outData_beforeEnq);
  init_symbol(&symbols[7u],
	      "bram_serverAdapter_outData_dequeueing",
	      SYM_MODULE,
	      &INST_bram_serverAdapter_outData_dequeueing);
  init_symbol(&symbols[8u],
	      "bram_serverAdapter_outData_enqw",
	      SYM_MODULE,
	      &INST_bram_serverAdapter_outData_enqw);
  init_symbol(&symbols[9u],
	      "bram_serverAdapter_outData_ff",
	      SYM_MODULE,
	      &INST_bram_serverAdapter_outData_ff);
  init_symbol(&symbols[10u], "bram_serverAdapter_s1", SYM_MODULE, &INST_bram_serverAdapter_s1);
  init_symbol(&symbols[11u], "bram_serverAdapter_s1_1", SYM_MODULE, &INST_bram_serverAdapter_s1_1);
  init_symbol(&symbols[12u],
	      "bram_serverAdapter_writeWithResp",
	      SYM_MODULE,
	      &INST_bram_serverAdapter_writeWithResp);
  init_symbol(&symbols[13u], "cacheQueue", SYM_MODULE, &INST_cacheQueue);
  init_symbol(&symbols[14u], "cycle_count", SYM_MODULE, &INST_cycle_count);
  init_symbol(&symbols[15u], "dCache", SYM_MODULE, &INST_dCache);
  init_symbol(&symbols[16u], "dreq", SYM_MODULE, &INST_dreq);
  init_symbol(&symbols[17u], "iCache", SYM_MODULE, &INST_iCache);
  init_symbol(&symbols[18u], "ireq", SYM_MODULE, &INST_ireq);
  init_symbol(&symbols[19u], "mainMem", SYM_MODULE, &INST_mainMem);
  init_symbol(&symbols[20u], "mmioreq", SYM_MODULE, &INST_mmioreq);
  init_symbol(&symbols[21u], "RL_bram_serverAdapter_cnt_finalAdd", SYM_RULE);
  init_symbol(&symbols[22u], "RL_bram_serverAdapter_moveToOutFIFO", SYM_RULE);
  init_symbol(&symbols[23u], "RL_bram_serverAdapter_outData_dequeue", SYM_RULE);
  init_symbol(&symbols[24u], "RL_bram_serverAdapter_outData_enqueue", SYM_RULE);
  init_symbol(&symbols[25u], "RL_bram_serverAdapter_overRun", SYM_RULE);
  init_symbol(&symbols[26u], "RL_bram_serverAdapter_s1__dreg_update", SYM_RULE);
  init_symbol(&symbols[27u], "RL_bram_serverAdapter_stageReadResponseAlways", SYM_RULE);
  init_symbol(&symbols[28u], "RL_dFromMemResp", SYM_RULE);
  init_symbol(&symbols[29u], "RL_dToMemReq", SYM_RULE);
  init_symbol(&symbols[30u], "RL_iFromMemResp", SYM_RULE);
  init_symbol(&symbols[31u], "RL_iToMemReq", SYM_RULE);
  init_symbol(&symbols[32u], "RL_requestD", SYM_RULE);
  init_symbol(&symbols[33u], "RL_requestI", SYM_RULE);
  init_symbol(&symbols[34u], "RL_requestMMIO", SYM_RULE);
  init_symbol(&symbols[35u], "RL_responseD", SYM_RULE);
  init_symbol(&symbols[36u], "RL_responseI", SYM_RULE);
  init_symbol(&symbols[37u], "RL_responseMMIO", SYM_RULE);
  init_symbol(&symbols[38u], "RL_tic", SYM_RULE);
  init_symbol(&symbols[39u], "rv_core", SYM_MODULE, &INST_rv_core);
}


/* Rule actions */

void MOD_mktop_pipelined::RL_bram_serverAdapter_outData_enqueue()
{
  DEF_bram_serverAdapter_outData_enqw_wget____d7 = INST_bram_serverAdapter_outData_enqw.METH_wget();
  INST_bram_serverAdapter_outData_ff.METH_enq(DEF_bram_serverAdapter_outData_enqw_wget____d7);
}

void MOD_mktop_pipelined::RL_bram_serverAdapter_outData_dequeue()
{
  INST_bram_serverAdapter_outData_ff.METH_deq();
}

void MOD_mktop_pipelined::RL_bram_serverAdapter_cnt_finalAdd()
{
  tUInt8 DEF_IF_bram_serverAdapter_cnt_3_whas__2_THEN_bram__ETC___d22;
  tUInt8 DEF_b__h4595;
  tUInt8 DEF_b__h4602;
  tUInt8 DEF_b__h4639;
  tUInt8 DEF_b__h4575;
  DEF_b__h4575 = INST_bram_serverAdapter_cnt_3.METH_wget();
  DEF_b__h4639 = INST_bram_serverAdapter_cnt_2.METH_wget();
  DEF_b__h4602 = INST_bram_serverAdapter_cnt_1.METH_wget();
  DEF_b__h4595 = INST_bram_serverAdapter_cnt.METH_read();
  DEF_bram_serverAdapter_cnt_3_whas____d12 = INST_bram_serverAdapter_cnt_3.METH_whas();
  DEF_bram_serverAdapter_cnt_2_whas____d10 = INST_bram_serverAdapter_cnt_2.METH_whas();
  DEF_bram_serverAdapter_cnt_1_whas____d9 = INST_bram_serverAdapter_cnt_1.METH_whas();
  DEF_IF_bram_serverAdapter_cnt_3_whas__2_THEN_bram__ETC___d22 = DEF_bram_serverAdapter_cnt_3_whas____d12 ? DEF_b__h4575 : (tUInt8)7u & (((tUInt8)7u & (DEF_b__h4595 + (DEF_bram_serverAdapter_cnt_1_whas____d9 ? DEF_b__h4602 : (tUInt8)0u))) + (DEF_bram_serverAdapter_cnt_2_whas____d10 ? DEF_b__h4639 : (tUInt8)0u));
  INST_bram_serverAdapter_cnt.METH_write(DEF_IF_bram_serverAdapter_cnt_3_whas__2_THEN_bram__ETC___d22);
}

void MOD_mktop_pipelined::RL_bram_serverAdapter_s1__dreg_update()
{
  tUInt8 DEF_IF_bram_serverAdapter_s1_1_whas__3_THEN_bram_s_ETC___d26;
  DEF_IF_bram_serverAdapter_s1_1_whas__3_THEN_bram_s_ETC___d26 = INST_bram_serverAdapter_s1_1.METH_whas() ? INST_bram_serverAdapter_s1_1.METH_wget() : (tUInt8)0u;
  INST_bram_serverAdapter_s1.METH_write(DEF_IF_bram_serverAdapter_s1_1_whas__3_THEN_bram_s_ETC___d26);
}

void MOD_mktop_pipelined::RL_bram_serverAdapter_stageReadResponseAlways()
{
  tUInt8 DEF__1_CONCAT_NOT_bram_serverAdapter_writeWithResp__ETC___d33;
  tUInt8 DEF_NOT_bram_serverAdapter_writeWithResp_wget__8_B_ETC___d32;
  tUInt8 DEF_bram_serverAdapter_writeWithResp_wget____d28;
  DEF_bram_serverAdapter_writeWithResp_wget____d28 = INST_bram_serverAdapter_writeWithResp.METH_wget();
  DEF_NOT_bram_serverAdapter_writeWithResp_wget__8_B_ETC___d32 = !((tUInt8)(DEF_bram_serverAdapter_writeWithResp_wget____d28 >> 1u)) || (tUInt8)((tUInt8)1u & DEF_bram_serverAdapter_writeWithResp_wget____d28);
  DEF__1_CONCAT_NOT_bram_serverAdapter_writeWithResp__ETC___d33 = (tUInt8)3u & (((tUInt8)1u << 1u) | DEF_NOT_bram_serverAdapter_writeWithResp_wget__8_B_ETC___d32);
  INST_bram_serverAdapter_s1_1.METH_wset(DEF__1_CONCAT_NOT_bram_serverAdapter_writeWithResp__ETC___d33);
  if (DEF_NOT_bram_serverAdapter_writeWithResp_wget__8_B_ETC___d32)
    INST_bram_serverAdapter_cnt_1.METH_wset((tUInt8)1u);
}

void MOD_mktop_pipelined::RL_bram_serverAdapter_moveToOutFIFO()
{
  DEF_bram_memory_read____d41 = INST_bram_memory.METH_read();
  DEF_bram_serverAdapter_s1___d34 = INST_bram_serverAdapter_s1.METH_read();
  DEF_bram_serverAdapter_s1_4_BIT_0___d35 = (tUInt8)((tUInt8)1u & DEF_bram_serverAdapter_s1___d34);
  if (DEF_bram_serverAdapter_s1_4_BIT_0___d35)
    INST_bram_serverAdapter_outData_enqw.METH_wset(DEF_bram_memory_read____d41);
  if (DEF_bram_serverAdapter_s1_4_BIT_0___d35)
    INST_bram_serverAdapter_outData_beforeEnq.METH_write((tUInt8)1u);
}

void MOD_mktop_pipelined::RL_bram_serverAdapter_overRun()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mktop_pipelined::RL_tic()
{
  tUInt32 DEF_x__h7706;
  tUInt32 DEF__read__h7687;
  DEF__read__h7687 = INST_cycle_count.METH_read();
  DEF_x__h7706 = DEF__read__h7687 + 1u;
  INST_cycle_count.METH_write(DEF_x__h7706);
}

void MOD_mktop_pipelined::RL_requestI()
{
  tUInt8 DEF_rv_core_getIReq_5_BITS_67_TO_64___d56;
  tUInt32 DEF_value__h7789;
  tUInt32 DEF_value__h7785;
  tUWide DEF_AVMeth_rv_core_getIReq(68u, false);
  DEF_AVMeth_rv_core_getIReq = INST_rv_core.METH_getIReq();
  DEF_rv_core_getIReq___d55 = DEF_AVMeth_rv_core_getIReq;
  DEF_value__h7785 = DEF_rv_core_getIReq___d55.get_whole_word(1u);
  DEF_value__h7789 = DEF_rv_core_getIReq___d55.get_whole_word(0u);
  DEF_rv_core_getIReq_5_BITS_67_TO_64___d56 = DEF_rv_core_getIReq___d55.get_bits_in_word8(2u, 0u, 4u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_4, &__str_literal_5);
    dollar_write(sim_hdl, this, "s,4", &__str_literal_6, DEF_rv_core_getIReq_5_BITS_67_TO_64___d56);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_8);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h7785);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_9);
    dollar_write(sim_hdl, this, "s,32,s", &__str_literal_6, DEF_value__h7789, &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_ireq.METH_write(DEF_rv_core_getIReq___d55);
  INST_iCache.METH_putFromProc(DEF_rv_core_getIReq___d55);
}

void MOD_mktop_pipelined::RL_responseI()
{
  tUInt8 DEF_NOT_iCache_getToProc_6_BIT_0_9___d70;
  tUInt8 DEF_iCache_getToProc_6_BIT_0___d69;
  tUInt8 DEF__read_byte_en__h7926;
  tUInt32 DEF_value__h7947;
  tUInt32 DEF_value__h7942;
  tUInt32 DEF_value__h7937;
  tUInt32 DEF_value__h7933;
  tUWide DEF_AVMeth_iCache_getToProc(65u, false);
  DEF_ireq___d62 = INST_ireq.METH_read();
  DEF_value__h7933 = DEF_ireq___d62.get_whole_word(1u);
  DEF_value__h7937 = DEF_ireq___d62.get_whole_word(0u);
  DEF__read_byte_en__h7926 = DEF_ireq___d62.get_bits_in_word8(2u, 0u, 4u);
  DEF_AVMeth_iCache_getToProc = INST_iCache.METH_getToProc();
  DEF_iCache_getToProc___d66 = DEF_AVMeth_iCache_getToProc;
  DEF_value__h7942 = primExtract32(32u, 65u, DEF_iCache_getToProc___d66, 32u, 64u, 32u, 33u);
  DEF_value__h7947 = primExtract32(32u, 65u, DEF_iCache_getToProc___d66, 32u, 32u, 32u, 1u);
  DEF_iCache_getToProc_6_BIT_0___d69 = DEF_iCache_getToProc___d66.get_bits_in_word8(0u, 0u, 1u);
  DEF_NOT_iCache_getToProc_6_BIT_0_9___d70 = !DEF_iCache_getToProc_6_BIT_0___d69;
  DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72.set_bits_in_word(DEF_ireq___d62.get_bits_in_word8(2u,
														 0u,
														 4u),
										2u,
										0u,
										4u).build_concat((((tUInt64)(DEF_ireq___d62.get_whole_word(1u))) << 32u) | (tUInt64)(DEF_value__h7942),
												 0u,
												 64u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_12);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_4, &__str_literal_5);
    dollar_write(sim_hdl, this, "s,4", &__str_literal_6, DEF__read_byte_en__h7926);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_8);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h7933);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_9);
    dollar_write(sim_hdl, this, "s,32,s", &__str_literal_6, DEF_value__h7937, &__str_literal_10);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_13, &__str_literal_14);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h7942);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_15);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h7947);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_16);
    if (DEF_iCache_getToProc_6_BIT_0___d69)
      dollar_write(sim_hdl, this, "s", &__str_literal_17);
    if (DEF_NOT_iCache_getToProc_6_BIT_0_9___d70)
      dollar_write(sim_hdl, this, "s", &__str_literal_18);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_rv_core.METH_getIResp(DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72);
}

void MOD_mktop_pipelined::RL_requestD()
{
  tUInt8 DEF_rv_core_getDReq_6_BITS_67_TO_64___d77;
  tUInt32 DEF_value__h8102;
  tUInt32 DEF_value__h8100;
  tUWide DEF_AVMeth_rv_core_getDReq(68u, false);
  DEF_AVMeth_rv_core_getDReq = INST_rv_core.METH_getDReq();
  DEF_rv_core_getDReq___d76 = DEF_AVMeth_rv_core_getDReq;
  DEF_value__h8100 = DEF_rv_core_getDReq___d76.get_whole_word(1u);
  DEF_value__h8102 = DEF_rv_core_getDReq___d76.get_whole_word(0u);
  DEF_rv_core_getDReq_6_BITS_67_TO_64___d77 = DEF_rv_core_getDReq___d76.get_bits_in_word8(2u, 0u, 4u);
  INST_dreq.METH_write(DEF_rv_core_getDReq___d76);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_19);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_4, &__str_literal_5);
    dollar_write(sim_hdl, this, "s,4", &__str_literal_6, DEF_rv_core_getDReq_6_BITS_67_TO_64___d77);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_8);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h8100);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_9);
    dollar_write(sim_hdl, this, "s,32,s", &__str_literal_6, DEF_value__h8102, &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_dCache.METH_putFromProc(DEF_rv_core_getDReq___d76);
}

void MOD_mktop_pipelined::RL_responseD()
{
  tUInt8 DEF_NOT_dCache_getToProc_7_BIT_0_0___d91;
  tUInt8 DEF_dCache_getToProc_7_BIT_0___d90;
  tUInt8 DEF__read_byte_en__h8197;
  tUInt32 DEF_value__h8218;
  tUInt32 DEF_value__h8213;
  tUInt32 DEF_value__h8208;
  tUInt32 DEF_value__h8204;
  tUWide DEF_AVMeth_dCache_getToProc(65u, false);
  DEF_dreq___d83 = INST_dreq.METH_read();
  DEF_value__h8204 = DEF_dreq___d83.get_whole_word(1u);
  DEF_value__h8208 = DEF_dreq___d83.get_whole_word(0u);
  DEF__read_byte_en__h8197 = DEF_dreq___d83.get_bits_in_word8(2u, 0u, 4u);
  DEF_AVMeth_dCache_getToProc = INST_dCache.METH_getToProc();
  DEF_dCache_getToProc___d87 = DEF_AVMeth_dCache_getToProc;
  DEF_value__h8213 = primExtract32(32u, 65u, DEF_dCache_getToProc___d87, 32u, 64u, 32u, 33u);
  DEF_value__h8218 = primExtract32(32u, 65u, DEF_dCache_getToProc___d87, 32u, 32u, 32u, 1u);
  DEF_dCache_getToProc_7_BIT_0___d90 = DEF_dCache_getToProc___d87.get_bits_in_word8(0u, 0u, 1u);
  DEF_NOT_dCache_getToProc_7_BIT_0_0___d91 = !DEF_dCache_getToProc_7_BIT_0___d90;
  DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93.set_bits_in_word(DEF_dreq___d83.get_bits_in_word8(2u,
														 0u,
														 4u),
										2u,
										0u,
										4u).build_concat((((tUInt64)(DEF_dreq___d83.get_whole_word(1u))) << 32u) | (tUInt64)(DEF_value__h8213),
												 0u,
												 64u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_12);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_4, &__str_literal_5);
    dollar_write(sim_hdl, this, "s,4", &__str_literal_6, DEF__read_byte_en__h8197);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_8);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h8204);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_9);
    dollar_write(sim_hdl, this, "s,32,s", &__str_literal_6, DEF_value__h8208, &__str_literal_10);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_13, &__str_literal_14);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h8213);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_15);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h8218);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_16);
    if (DEF_dCache_getToProc_7_BIT_0___d90)
      dollar_write(sim_hdl, this, "s", &__str_literal_17);
    if (DEF_NOT_dCache_getToProc_7_BIT_0_0___d91)
      dollar_write(sim_hdl, this, "s", &__str_literal_18);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_rv_core.METH_getDResp(DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93);
}

void MOD_mktop_pipelined::RL_iToMemReq()
{
  tUWide DEF_AVMeth_iCache_getToMem(545u, false);
  DEF_AVMeth_iCache_getToMem = INST_iCache.METH_getToMem();
  DEF_iCache_getToMem___d99 = DEF_AVMeth_iCache_getToMem;
  INST_mainMem.METH_put(DEF_iCache_getToMem___d99);
  INST_cacheQueue.METH_enq((tUInt8)0u);
}

void MOD_mktop_pipelined::RL_iFromMemResp()
{
  tUWide DEF_AVMeth_mainMem_get(512u, false);
  DEF_cacheQueue_first____d101 = INST_cacheQueue.METH_first();
  DEF_NOT_cacheQueue_first__01___d107 = !DEF_cacheQueue_first____d101;
  if (DEF_NOT_cacheQueue_first__01___d107)
    DEF_AVMeth_mainMem_get = INST_mainMem.METH_get();
  else
    DEF_AVMeth_mainMem_get = UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
  DEF_v__h8499 = DEF_AVMeth_mainMem_get;
  if (DEF_NOT_cacheQueue_first__01___d107)
    INST_iCache.METH_putFromMem(DEF_v__h8499);
  if (DEF_NOT_cacheQueue_first__01___d107)
    INST_cacheQueue.METH_deq();
}

void MOD_mktop_pipelined::RL_dToMemReq()
{
  tUWide DEF_AVMeth_dCache_getToMem(545u, false);
  DEF_AVMeth_dCache_getToMem = INST_dCache.METH_getToMem();
  DEF_dCache_getToMem___d111 = DEF_AVMeth_dCache_getToMem;
  INST_mainMem.METH_put(DEF_dCache_getToMem___d111);
  INST_cacheQueue.METH_enq((tUInt8)1u);
}

void MOD_mktop_pipelined::RL_dFromMemResp()
{
  tUWide DEF_AVMeth_mainMem_get(512u, false);
  DEF_cacheQueue_first____d101 = INST_cacheQueue.METH_first();
  if (DEF_cacheQueue_first____d101)
    DEF_AVMeth_mainMem_get = INST_mainMem.METH_get();
  else
    DEF_AVMeth_mainMem_get = UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
  DEF_v__h8499 = DEF_AVMeth_mainMem_get;
  if (DEF_cacheQueue_first____d101)
    INST_dCache.METH_putFromMem(DEF_v__h8499);
  if (DEF_cacheQueue_first____d101)
    INST_cacheQueue.METH_deq();
}

void MOD_mktop_pipelined::RL_requestMMIO()
{
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_67_TO_64_20_EQ_0xF__ETC___d125;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d130;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d132;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d126;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d128;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_31_TO_0_22_EQ_0___d129;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_67_TO_64___d120;
  tUInt8 DEF_rv_core_getMMIOReq_19_BITS_7_TO_0___d127;
  tUInt32 DEF_value__h8617;
  tUInt32 DEF_value__h8613;
  tUWide DEF_AVMeth_rv_core_getMMIOReq(68u, false);
  DEF_AVMeth_rv_core_getMMIOReq = INST_rv_core.METH_getMMIOReq();
  DEF_rv_core_getMMIOReq___d119 = DEF_AVMeth_rv_core_getMMIOReq;
  DEF_value__h8613 = DEF_rv_core_getMMIOReq___d119.get_whole_word(1u);
  DEF_value__h8617 = DEF_rv_core_getMMIOReq___d119.get_whole_word(0u);
  DEF_rv_core_getMMIOReq_19_BITS_7_TO_0___d127 = DEF_rv_core_getMMIOReq___d119.get_bits_in_word8(0u,
												 0u,
												 8u);
  DEF_rv_core_getMMIOReq_19_BITS_67_TO_64___d120 = DEF_rv_core_getMMIOReq___d119.get_bits_in_word8(2u,
												   0u,
												   4u);
  DEF_rv_core_getMMIOReq_19_BITS_31_TO_0_22_EQ_0___d129 = DEF_value__h8617 == 0u;
  DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d128 = DEF_value__h8613 == 4026597368u;
  DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d126 = DEF_value__h8613 == 4026597360u;
  DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d132 = DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d128 && !DEF_rv_core_getMMIOReq_19_BITS_31_TO_0_22_EQ_0___d129;
  DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d130 = DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d128 && DEF_rv_core_getMMIOReq_19_BITS_31_TO_0_22_EQ_0___d129;
  DEF_rv_core_getMMIOReq_19_BITS_67_TO_64_20_EQ_0xF__ETC___d125 = DEF_rv_core_getMMIOReq_19_BITS_67_TO_64___d120 == (tUInt8)15u && DEF_value__h8613 == 4026597364u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_20);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_4, &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,4",
		 &__str_literal_6,
		 DEF_rv_core_getMMIOReq_19_BITS_67_TO_64___d120);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_8);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h8613);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_9);
    dollar_write(sim_hdl, this, "s,32,s", &__str_literal_6, DEF_value__h8617, &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
    if (DEF_rv_core_getMMIOReq_19_BITS_67_TO_64_20_EQ_0xF__ETC___d125)
      dollar_fwrite(sim_hdl, this, "32,s,32", 2147483650u, &__str_literal_21, DEF_value__h8617);
    if (DEF_rv_core_getMMIOReq_19_BITS_67_TO_64_20_EQ_0xF__ETC___d125)
      dollar_fflush("32", 2147483650u);
    if (DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d126)
      dollar_fwrite(sim_hdl,
		    this,
		    "32,s,8",
		    2147483650u,
		    &__str_literal_22,
		    DEF_rv_core_getMMIOReq_19_BITS_7_TO_0___d127);
    if (DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d126)
      dollar_fflush("32", 2147483650u);
    if (DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d130)
      dollar_fdisplay(sim_hdl, this, "32,s", 2147483650u, &__str_literal_23);
    if (DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d132)
      dollar_fdisplay(sim_hdl, this, "32,s,32", 2147483650u, &__str_literal_24, DEF_value__h8617);
    if (DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d128)
      dollar_fflush("32", 2147483650u);
    if (DEF_rv_core_getMMIOReq_19_BITS_63_TO_32_21_EQ_0xF0_ETC___d128)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_mmioreq.METH_enq(DEF_rv_core_getMMIOReq___d119);
}

void MOD_mktop_pipelined::RL_responseMMIO()
{
  tUInt8 DEF_mmioreq_first__36_BITS_67_TO_64___d137;
  tUInt32 DEF_value__h9218;
  tUInt32 DEF_value__h9214;
  DEF_mmioreq_first____d136 = INST_mmioreq.METH_first();
  DEF_value__h9214 = DEF_mmioreq_first____d136.get_whole_word(1u);
  DEF_value__h9218 = DEF_mmioreq_first____d136.get_whole_word(0u);
  DEF_mmioreq_first__36_BITS_67_TO_64___d137 = DEF_mmioreq_first____d136.get_bits_in_word8(2u,
											   0u,
											   4u);
  INST_mmioreq.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_25);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_4, &__str_literal_5);
    dollar_write(sim_hdl, this, "s,4", &__str_literal_6, DEF_mmioreq_first__36_BITS_67_TO_64___d137);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_8);
    dollar_write(sim_hdl, this, "s,32", &__str_literal_6, DEF_value__h9214);
    dollar_write(sim_hdl, this, "s,s", &__str_literal_7, &__str_literal_9);
    dollar_write(sim_hdl, this, "s,32,s", &__str_literal_6, DEF_value__h9218, &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_rv_core.METH_getMMIOResp(DEF_mmioreq_first____d136);
}


/* Methods */


/* Reset routines */

void MOD_mktop_pipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rv_core.reset_RST_N(ARG_rst_in);
  INST_mmioreq.reset_RST(ARG_rst_in);
  INST_mainMem.reset_RST_N(ARG_rst_in);
  INST_iCache.reset_RST_N(ARG_rst_in);
  INST_dCache.reset_RST_N(ARG_rst_in);
  INST_cycle_count.reset_RST(ARG_rst_in);
  INST_cacheQueue.reset_RST(ARG_rst_in);
  INST_bram_serverAdapter_s1.reset_RST(ARG_rst_in);
  INST_bram_serverAdapter_outData_ff.reset_RST(ARG_rst_in);
  INST_bram_serverAdapter_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mktop_pipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mktop_pipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bram_memory.dump_state(indent + 2u);
  INST_bram_serverAdapter_cnt.dump_state(indent + 2u);
  INST_bram_serverAdapter_cnt_1.dump_state(indent + 2u);
  INST_bram_serverAdapter_cnt_2.dump_state(indent + 2u);
  INST_bram_serverAdapter_cnt_3.dump_state(indent + 2u);
  INST_bram_serverAdapter_outData_beforeDeq.dump_state(indent + 2u);
  INST_bram_serverAdapter_outData_beforeEnq.dump_state(indent + 2u);
  INST_bram_serverAdapter_outData_dequeueing.dump_state(indent + 2u);
  INST_bram_serverAdapter_outData_enqw.dump_state(indent + 2u);
  INST_bram_serverAdapter_outData_ff.dump_state(indent + 2u);
  INST_bram_serverAdapter_s1.dump_state(indent + 2u);
  INST_bram_serverAdapter_s1_1.dump_state(indent + 2u);
  INST_bram_serverAdapter_writeWithResp.dump_state(indent + 2u);
  INST_cacheQueue.dump_state(indent + 2u);
  INST_cycle_count.dump_state(indent + 2u);
  INST_dCache.dump_state(indent + 2u);
  INST_dreq.dump_state(indent + 2u);
  INST_iCache.dump_state(indent + 2u);
  INST_ireq.dump_state(indent + 2u);
  INST_mainMem.dump_state(indent + 2u);
  INST_mmioreq.dump_state(indent + 2u);
  INST_rv_core.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mktop_pipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 41u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_cacheQueue_first__01___d107", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_memory_read____d41", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_serverAdapter_cnt_1_whas____d9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_serverAdapter_cnt_2_whas____d10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_serverAdapter_cnt_3_whas____d12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_serverAdapter_outData_enqw_wget____d7", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_serverAdapter_s1_4_BIT_0___d35", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bram_serverAdapter_s1___d34", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cacheQueue_first____d101", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dCache_getToMem___d111", 545u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dCache_getToProc___d87", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dreq___d83", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "iCache_getToMem___d99", 545u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "iCache_getToProc___d66", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ireq___d62", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mmioreq_first____d136", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rv_core_getDReq___d76", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rv_core_getIReq___d55", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rv_core_getMMIOReq___d119", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h8499", 512u);
  num = INST_bram_memory.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_cnt.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_cnt_1.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_cnt_2.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_cnt_3.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_outData_beforeDeq.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_outData_beforeEnq.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_outData_dequeueing.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_outData_enqw.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_outData_ff.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_s1.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_s1_1.dump_VCD_defs(num);
  num = INST_bram_serverAdapter_writeWithResp.dump_VCD_defs(num);
  num = INST_cacheQueue.dump_VCD_defs(num);
  num = INST_cycle_count.dump_VCD_defs(num);
  num = INST_dreq.dump_VCD_defs(num);
  num = INST_ireq.dump_VCD_defs(num);
  num = INST_mmioreq.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dCache.dump_VCD_defs(l);
    num = INST_iCache.dump_VCD_defs(l);
    num = INST_mainMem.dump_VCD_defs(l);
    num = INST_rv_core.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mktop_pipelined::dump_VCD(tVCDDumpType dt,
				   unsigned int levels,
				   MOD_mktop_pipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mktop_pipelined::vcd_defs(tVCDDumpType dt, MOD_mktop_pipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 545u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 545u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 512u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_cacheQueue_first__01___d107) != DEF_NOT_cacheQueue_first__01___d107)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_cacheQueue_first__01___d107, 1u);
	backing.DEF_NOT_cacheQueue_first__01___d107 = DEF_NOT_cacheQueue_first__01___d107;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_bram_memory_read____d41) != DEF_bram_memory_read____d41)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_memory_read____d41, 512u);
	backing.DEF_bram_memory_read____d41 = DEF_bram_memory_read____d41;
      }
      ++num;
      if ((backing.DEF_bram_serverAdapter_cnt_1_whas____d9) != DEF_bram_serverAdapter_cnt_1_whas____d9)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_serverAdapter_cnt_1_whas____d9, 1u);
	backing.DEF_bram_serverAdapter_cnt_1_whas____d9 = DEF_bram_serverAdapter_cnt_1_whas____d9;
      }
      ++num;
      if ((backing.DEF_bram_serverAdapter_cnt_2_whas____d10) != DEF_bram_serverAdapter_cnt_2_whas____d10)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_serverAdapter_cnt_2_whas____d10, 1u);
	backing.DEF_bram_serverAdapter_cnt_2_whas____d10 = DEF_bram_serverAdapter_cnt_2_whas____d10;
      }
      ++num;
      if ((backing.DEF_bram_serverAdapter_cnt_3_whas____d12) != DEF_bram_serverAdapter_cnt_3_whas____d12)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_serverAdapter_cnt_3_whas____d12, 1u);
	backing.DEF_bram_serverAdapter_cnt_3_whas____d12 = DEF_bram_serverAdapter_cnt_3_whas____d12;
      }
      ++num;
      if ((backing.DEF_bram_serverAdapter_outData_enqw_wget____d7) != DEF_bram_serverAdapter_outData_enqw_wget____d7)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_serverAdapter_outData_enqw_wget____d7, 512u);
	backing.DEF_bram_serverAdapter_outData_enqw_wget____d7 = DEF_bram_serverAdapter_outData_enqw_wget____d7;
      }
      ++num;
      if ((backing.DEF_bram_serverAdapter_s1_4_BIT_0___d35) != DEF_bram_serverAdapter_s1_4_BIT_0___d35)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_serverAdapter_s1_4_BIT_0___d35, 1u);
	backing.DEF_bram_serverAdapter_s1_4_BIT_0___d35 = DEF_bram_serverAdapter_s1_4_BIT_0___d35;
      }
      ++num;
      if ((backing.DEF_bram_serverAdapter_s1___d34) != DEF_bram_serverAdapter_s1___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_bram_serverAdapter_s1___d34, 2u);
	backing.DEF_bram_serverAdapter_s1___d34 = DEF_bram_serverAdapter_s1___d34;
      }
      ++num;
      if ((backing.DEF_cacheQueue_first____d101) != DEF_cacheQueue_first____d101)
      {
	vcd_write_val(sim_hdl, num, DEF_cacheQueue_first____d101, 1u);
	backing.DEF_cacheQueue_first____d101 = DEF_cacheQueue_first____d101;
      }
      ++num;
      if ((backing.DEF_dCache_getToMem___d111) != DEF_dCache_getToMem___d111)
      {
	vcd_write_val(sim_hdl, num, DEF_dCache_getToMem___d111, 545u);
	backing.DEF_dCache_getToMem___d111 = DEF_dCache_getToMem___d111;
      }
      ++num;
      if ((backing.DEF_dCache_getToProc___d87) != DEF_dCache_getToProc___d87)
      {
	vcd_write_val(sim_hdl, num, DEF_dCache_getToProc___d87, 65u);
	backing.DEF_dCache_getToProc___d87 = DEF_dCache_getToProc___d87;
      }
      ++num;
      if ((backing.DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93) != DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93)
      {
	vcd_write_val(sim_hdl, num, DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93, 68u);
	backing.DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93 = DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93;
      }
      ++num;
      if ((backing.DEF_dreq___d83) != DEF_dreq___d83)
      {
	vcd_write_val(sim_hdl, num, DEF_dreq___d83, 68u);
	backing.DEF_dreq___d83 = DEF_dreq___d83;
      }
      ++num;
      if ((backing.DEF_iCache_getToMem___d99) != DEF_iCache_getToMem___d99)
      {
	vcd_write_val(sim_hdl, num, DEF_iCache_getToMem___d99, 545u);
	backing.DEF_iCache_getToMem___d99 = DEF_iCache_getToMem___d99;
      }
      ++num;
      if ((backing.DEF_iCache_getToProc___d66) != DEF_iCache_getToProc___d66)
      {
	vcd_write_val(sim_hdl, num, DEF_iCache_getToProc___d66, 65u);
	backing.DEF_iCache_getToProc___d66 = DEF_iCache_getToProc___d66;
      }
      ++num;
      if ((backing.DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72) != DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72)
      {
	vcd_write_val(sim_hdl, num, DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72, 68u);
	backing.DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72 = DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72;
      }
      ++num;
      if ((backing.DEF_ireq___d62) != DEF_ireq___d62)
      {
	vcd_write_val(sim_hdl, num, DEF_ireq___d62, 68u);
	backing.DEF_ireq___d62 = DEF_ireq___d62;
      }
      ++num;
      if ((backing.DEF_mmioreq_first____d136) != DEF_mmioreq_first____d136)
      {
	vcd_write_val(sim_hdl, num, DEF_mmioreq_first____d136, 68u);
	backing.DEF_mmioreq_first____d136 = DEF_mmioreq_first____d136;
      }
      ++num;
      if ((backing.DEF_rv_core_getDReq___d76) != DEF_rv_core_getDReq___d76)
      {
	vcd_write_val(sim_hdl, num, DEF_rv_core_getDReq___d76, 68u);
	backing.DEF_rv_core_getDReq___d76 = DEF_rv_core_getDReq___d76;
      }
      ++num;
      if ((backing.DEF_rv_core_getIReq___d55) != DEF_rv_core_getIReq___d55)
      {
	vcd_write_val(sim_hdl, num, DEF_rv_core_getIReq___d55, 68u);
	backing.DEF_rv_core_getIReq___d55 = DEF_rv_core_getIReq___d55;
      }
      ++num;
      if ((backing.DEF_rv_core_getMMIOReq___d119) != DEF_rv_core_getMMIOReq___d119)
      {
	vcd_write_val(sim_hdl, num, DEF_rv_core_getMMIOReq___d119, 68u);
	backing.DEF_rv_core_getMMIOReq___d119 = DEF_rv_core_getMMIOReq___d119;
      }
      ++num;
      if ((backing.DEF_v__h8499) != DEF_v__h8499)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h8499, 512u);
	backing.DEF_v__h8499 = DEF_v__h8499;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_cacheQueue_first__01___d107, 1u);
      backing.DEF_NOT_cacheQueue_first__01___d107 = DEF_NOT_cacheQueue_first__01___d107;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_bram_memory_read____d41, 512u);
      backing.DEF_bram_memory_read____d41 = DEF_bram_memory_read____d41;
      vcd_write_val(sim_hdl, num++, DEF_bram_serverAdapter_cnt_1_whas____d9, 1u);
      backing.DEF_bram_serverAdapter_cnt_1_whas____d9 = DEF_bram_serverAdapter_cnt_1_whas____d9;
      vcd_write_val(sim_hdl, num++, DEF_bram_serverAdapter_cnt_2_whas____d10, 1u);
      backing.DEF_bram_serverAdapter_cnt_2_whas____d10 = DEF_bram_serverAdapter_cnt_2_whas____d10;
      vcd_write_val(sim_hdl, num++, DEF_bram_serverAdapter_cnt_3_whas____d12, 1u);
      backing.DEF_bram_serverAdapter_cnt_3_whas____d12 = DEF_bram_serverAdapter_cnt_3_whas____d12;
      vcd_write_val(sim_hdl, num++, DEF_bram_serverAdapter_outData_enqw_wget____d7, 512u);
      backing.DEF_bram_serverAdapter_outData_enqw_wget____d7 = DEF_bram_serverAdapter_outData_enqw_wget____d7;
      vcd_write_val(sim_hdl, num++, DEF_bram_serverAdapter_s1_4_BIT_0___d35, 1u);
      backing.DEF_bram_serverAdapter_s1_4_BIT_0___d35 = DEF_bram_serverAdapter_s1_4_BIT_0___d35;
      vcd_write_val(sim_hdl, num++, DEF_bram_serverAdapter_s1___d34, 2u);
      backing.DEF_bram_serverAdapter_s1___d34 = DEF_bram_serverAdapter_s1___d34;
      vcd_write_val(sim_hdl, num++, DEF_cacheQueue_first____d101, 1u);
      backing.DEF_cacheQueue_first____d101 = DEF_cacheQueue_first____d101;
      vcd_write_val(sim_hdl, num++, DEF_dCache_getToMem___d111, 545u);
      backing.DEF_dCache_getToMem___d111 = DEF_dCache_getToMem___d111;
      vcd_write_val(sim_hdl, num++, DEF_dCache_getToProc___d87, 65u);
      backing.DEF_dCache_getToProc___d87 = DEF_dCache_getToProc___d87;
      vcd_write_val(sim_hdl, num++, DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93, 68u);
      backing.DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93 = DEF_dreq_3_BITS_67_TO_32_2_CONCAT_dCache_getToProc_ETC___d93;
      vcd_write_val(sim_hdl, num++, DEF_dreq___d83, 68u);
      backing.DEF_dreq___d83 = DEF_dreq___d83;
      vcd_write_val(sim_hdl, num++, DEF_iCache_getToMem___d99, 545u);
      backing.DEF_iCache_getToMem___d99 = DEF_iCache_getToMem___d99;
      vcd_write_val(sim_hdl, num++, DEF_iCache_getToProc___d66, 65u);
      backing.DEF_iCache_getToProc___d66 = DEF_iCache_getToProc___d66;
      vcd_write_val(sim_hdl, num++, DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72, 68u);
      backing.DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72 = DEF_ireq_2_BITS_67_TO_32_1_CONCAT_iCache_getToProc_ETC___d72;
      vcd_write_val(sim_hdl, num++, DEF_ireq___d62, 68u);
      backing.DEF_ireq___d62 = DEF_ireq___d62;
      vcd_write_val(sim_hdl, num++, DEF_mmioreq_first____d136, 68u);
      backing.DEF_mmioreq_first____d136 = DEF_mmioreq_first____d136;
      vcd_write_val(sim_hdl, num++, DEF_rv_core_getDReq___d76, 68u);
      backing.DEF_rv_core_getDReq___d76 = DEF_rv_core_getDReq___d76;
      vcd_write_val(sim_hdl, num++, DEF_rv_core_getIReq___d55, 68u);
      backing.DEF_rv_core_getIReq___d55 = DEF_rv_core_getIReq___d55;
      vcd_write_val(sim_hdl, num++, DEF_rv_core_getMMIOReq___d119, 68u);
      backing.DEF_rv_core_getMMIOReq___d119 = DEF_rv_core_getMMIOReq___d119;
      vcd_write_val(sim_hdl, num++, DEF_v__h8499, 512u);
      backing.DEF_v__h8499 = DEF_v__h8499;
    }
}

void MOD_mktop_pipelined::vcd_prims(tVCDDumpType dt, MOD_mktop_pipelined &backing)
{
  INST_bram_memory.dump_VCD(dt, backing.INST_bram_memory);
  INST_bram_serverAdapter_cnt.dump_VCD(dt, backing.INST_bram_serverAdapter_cnt);
  INST_bram_serverAdapter_cnt_1.dump_VCD(dt, backing.INST_bram_serverAdapter_cnt_1);
  INST_bram_serverAdapter_cnt_2.dump_VCD(dt, backing.INST_bram_serverAdapter_cnt_2);
  INST_bram_serverAdapter_cnt_3.dump_VCD(dt, backing.INST_bram_serverAdapter_cnt_3);
  INST_bram_serverAdapter_outData_beforeDeq.dump_VCD(dt,
						     backing.INST_bram_serverAdapter_outData_beforeDeq);
  INST_bram_serverAdapter_outData_beforeEnq.dump_VCD(dt,
						     backing.INST_bram_serverAdapter_outData_beforeEnq);
  INST_bram_serverAdapter_outData_dequeueing.dump_VCD(dt,
						      backing.INST_bram_serverAdapter_outData_dequeueing);
  INST_bram_serverAdapter_outData_enqw.dump_VCD(dt, backing.INST_bram_serverAdapter_outData_enqw);
  INST_bram_serverAdapter_outData_ff.dump_VCD(dt, backing.INST_bram_serverAdapter_outData_ff);
  INST_bram_serverAdapter_s1.dump_VCD(dt, backing.INST_bram_serverAdapter_s1);
  INST_bram_serverAdapter_s1_1.dump_VCD(dt, backing.INST_bram_serverAdapter_s1_1);
  INST_bram_serverAdapter_writeWithResp.dump_VCD(dt, backing.INST_bram_serverAdapter_writeWithResp);
  INST_cacheQueue.dump_VCD(dt, backing.INST_cacheQueue);
  INST_cycle_count.dump_VCD(dt, backing.INST_cycle_count);
  INST_dreq.dump_VCD(dt, backing.INST_dreq);
  INST_ireq.dump_VCD(dt, backing.INST_ireq);
  INST_mmioreq.dump_VCD(dt, backing.INST_mmioreq);
}

void MOD_mktop_pipelined::vcd_submodules(tVCDDumpType dt,
					 unsigned int levels,
					 MOD_mktop_pipelined &backing)
{
  INST_dCache.dump_VCD(dt, levels, backing.INST_dCache);
  INST_iCache.dump_VCD(dt, levels, backing.INST_iCache);
  INST_mainMem.dump_VCD(dt, levels, backing.INST_mainMem);
  INST_rv_core.dump_VCD(dt, levels, backing.INST_rv_core);
}
